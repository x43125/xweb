<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ppdream.xweb.mapper.BlogCollectMapper">
  <resultMap id="BaseResultMap" type="com.ppdream.xweb.entity.BlogCollect">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="blog_name" jdbcType="VARCHAR" property="blogName" />
    <result column="blog_id" jdbcType="BIGINT" property="blogId" />
    <result column="collect_user_id" jdbcType="BIGINT" property="collectUserId" />
    <result column="collect_user_name" jdbcType="VARCHAR" property="collectUserName" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, blog_name, blog_id, collect_user_id, collect_user_name, update_time, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from blog_collect
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from blog_collect
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.ppdream.xweb.entity.BlogCollect" useGeneratedKeys="true">
    insert into blog_collect (blog_name, blog_id, collect_user_id, 
      collect_user_name, update_time, create_time
      )
    values (#{blogName,jdbcType=VARCHAR}, #{blogId,jdbcType=BIGINT}, #{collectUserId,jdbcType=BIGINT}, 
      #{collectUserName,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.ppdream.xweb.entity.BlogCollect" useGeneratedKeys="true">
    insert into blog_collect
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="blogName != null">
        blog_name,
      </if>
      <if test="blogId != null">
        blog_id,
      </if>
      <if test="collectUserId != null">
        collect_user_id,
      </if>
      <if test="collectUserName != null">
        collect_user_name,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="blogName != null">
        #{blogName,jdbcType=VARCHAR},
      </if>
      <if test="blogId != null">
        #{blogId,jdbcType=BIGINT},
      </if>
      <if test="collectUserId != null">
        #{collectUserId,jdbcType=BIGINT},
      </if>
      <if test="collectUserName != null">
        #{collectUserName,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ppdream.xweb.entity.BlogCollect">
    update blog_collect
    <set>
      <if test="blogName != null">
        blog_name = #{blogName,jdbcType=VARCHAR},
      </if>
      <if test="blogId != null">
        blog_id = #{blogId,jdbcType=BIGINT},
      </if>
      <if test="collectUserId != null">
        collect_user_id = #{collectUserId,jdbcType=BIGINT},
      </if>
      <if test="collectUserName != null">
        collect_user_name = #{collectUserName,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ppdream.xweb.entity.BlogCollect">
    update blog_collect
    set blog_name = #{blogName,jdbcType=VARCHAR},
      blog_id = #{blogId,jdbcType=BIGINT},
      collect_user_id = #{collectUserId,jdbcType=BIGINT},
      collect_user_name = #{collectUserName,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>